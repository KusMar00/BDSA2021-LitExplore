@page "/"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using System.Linq


@attribute [Authorize]

<PageTitle>Index</PageTitle>


<BSJumbotron IsFluid="true" style="color:var(--lavender);">
    <h1 class="display-4">Welcome to LitExplore</h1>
    <p class="lead">Here you can keep a dynamic bibliography when working on a project. <i>LitExplore</i> will automatically recommend new literature, based on your existing bibliography. To get started, click a project or create a new one!</p>
    <hr class="my-4" />
</BSJumbotron>

<AuthorizeView>
    <Authorized>
        <div style="width: 90vw; margin: 0 auto 20px auto; display: flex; flex-direction: column; align-items:center; justify-content: center;">
            <h1 style="color: var(--lavender);">Your Projects</h1>
            <div style="display: flex; flex-direction: row; justify-content: center; margin-top:20px;">
                <BSBasicInput Style ="width: 20vw;"InputType="InputType.Text" @ref="UserSearchInput" Value="newProjectName" ValueChanged="@((string value) => SelectedChanged(value))" ValidateOnInput="true" Placeholder="New project"/>
                <BSButton style="background-color:var(--bs-success);" Id="addLit" class="adder" @onclick="@(() => @CreateNewProject())">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm6 13h-5v5h-2v-5h-5v-2h5v-5h2v5h5v2z" fill="white"/></svg>
                </BSButton>
                <BSTooltip Target="addLit" Placement="Placement.Bottom">Add new project</BSTooltip>
            </div>
            @if(UserProjects == null)
            {
                <p style="color: var(--lavender); margin-top: 10px;"><i>No projects were found</i></p>
            } 
            else
            {
                @foreach (var project in UserProjects.Owns.Concat(UserProjects.HasAccesTo))
                {
                    <ProjectCard Name="@project.Name" Owner="@project.Owner.DisplayName" ProjectId="@project.Id" />
                }
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <p style="margin: 50px;">You must login to LitExplore to proceed</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private UserProjectDTO UserProjects;
    private BSBasicInput<string>? UserSearchInput;
    private string newProjectName = string.Empty;

    private Guid userId;
    private UserDTO? user;

    protected void SelectedChanged(string e)
    {
        newProjectName = e;
    }

    protected override async Task OnInitializedAsync()
    {
        try
            {
            var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            userId = Guid.Parse(authstate.User.FindFirst(c => c.Type == "sub")?.Value);        
            try {
                user = await Http.GetFromJsonAsync<UserDTO>($"api/User/Get/{userId}");
            } 
            catch(Exception e)
            {
                var response = await Http.PostAsJsonAsync<UserDTO>("api/User/Create", new UserDTO(userId, authstate.User.Identity.Name));
            }
            UserProjects = await getProjects();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected async Task<UserProjectDTO> getProjects(){
        return await Http.GetFromJsonAsync<UserProjectDTO>($"api/Project/userId/{userId}");
    }

    protected async Task CreateNewProject(){
        try
        {
            var response = await Http.PostAsJsonAsync<ProjectCreateDTO>($"api/Project/Create", new ProjectCreateDTO(userId, newProjectName));
            if(response.StatusCode == System.Net.HttpStatusCode.OK){
                UserProjects = await getProjects();
            }
        } 
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
