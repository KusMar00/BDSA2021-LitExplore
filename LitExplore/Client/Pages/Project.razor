@page "/project"
@inject HttpClient Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager MyNavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider



<PageTitle>Project</PageTitle>
@if (project == null)
{
    <p>Loading project...</p>
}
else {
<h1 style="color: white;">@project.Name</h1>
<div class="content">
    <Collaborator project=@project userId=@userId />
    <Litterature project=@project/>
</div>


@if(project.Owner.Id == userId){
    <DeleteProject CurrentProject=@project/>
}

}
@code {
    [Parameter]
    public string Id { get; set; }
    private UserDTO user;
    private Guid userId;

    private ProjectDetailsDTO project;

    string GetQueryParm(string parmName)
    {
        var uriBuilder = new UriBuilder(MyNavigationManager.Uri);
        var q = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        return q[parmName] ?? "";
    }

    protected async Task<ProjectDetailsDTO> GetProject(){
        var ProjectId = GetQueryParm("projectId");
        return await Http.GetFromJsonAsync<ProjectDetailsDTO>($"api/Project/ProjectId/{ProjectId}");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            userId = Guid.Parse(authstate.User.FindFirst(c => c.Type == "sub")?.Value);    

            project = await GetProject();

            //if(!project.Collaborators.Contains(userID) ||Â project.Owner.Id != userId){
            //  MyNavigationManager.NavigateTo("/");
            //}
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}