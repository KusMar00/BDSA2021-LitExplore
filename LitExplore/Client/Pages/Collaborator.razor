@inject HttpClient Http

<div class="collaborators">
    <h3 style="color: var(--lavender);">Collaborators</h3>
    <BSListGroup>
        <BSListGroupItem>
            <p>@project.Owner.DisplayName <b>(Owner)</b></p>
        </BSListGroupItem>
        @foreach (var user in project.Collaborators)
        {
            <BSListGroupItem style="display: flex; flex-direction: row; justify-content: space-around;">
                <p>@user.DisplayName</p>                
                @if(project.Owner.Id == userId){
                    <BSButton OnClick=@(() => {removeCollaborator(@user.Id);})>Remove</BSButton>
                }
            </BSListGroupItem>
        }
    </BSListGroup>

    <button Id="addCollab" class="adder" @onclick="@(() => AddCollaborator.Show())">+</button>
    <BSTooltip Target="addCollab" Placement="Placement.Bottom">Add collaborator</BSTooltip>
</div>

<BSModal @ref="AddCollaborator" Size="Size.Large">
    <BSModalHeader OnClick="@(() => AddCollaborator.Hide())">Add a collaborator to the project</BSModalHeader>
    <BSBasicInput style="margin-top:20px; width: 20vw;" InputType="InputType.Text" @ref="UserSearchInput" Value="UserSearch" ValueChanged="@(async (string value) => { SearchedUsers = await SearchUser(value);})" ValidateOnInput="true" Placeholder="Username"/>
    <BSModalBody>
        <p>Search for a user to add as a collaborator.</p>
        @if(@SearchedUsers != null)
        {
            @foreach(var user in @SearchedUsers)
            {
                <p>@user.DisplayName</p>
                <button style="display: inline-block" @onclick="@(()=>{AddCollaboratorToProject(@user.Id);})">Add Collaborator</button>
            }
        }
    </BSModalBody>
</BSModal>

@code {
    [Parameter]
    public ProjectDetailsDTO project {get; set;}
    [Parameter]
    public Guid userId {get; set;}

    private BSModal AddCollaborator;
    private BSBasicInput<string> UserSearchInput;
    private string UserSearch = string.Empty;
    private UserDTO[] SearchedUsers;
    protected async void removeCollaborator(Guid id){
        await Http.PutAsJsonAsync($"api/Project/Collaborator", new ProjectAddRemoveCollaboratorDTO(project.Id, id));
    }
     protected async Task<UserDTO[]> SearchUser(string e)
    {
        UserSearch = e;
        if (UserSearch.Length > 3)
        {
            return await Http.GetFromJsonAsync<UserDTO[]>($"api/User/Name/{UserSearch}");
        }
        return new UserDTO[0];
    }

    protected async void AddCollaboratorToProject(Guid userId)
    {
        ProjectAddRemoveCollaboratorDTO user = new ProjectAddRemoveCollaboratorDTO(project.Id, userId);
        var addUser = await Http.PostAsJsonAsync<ProjectAddRemoveCollaboratorDTO>($"api/Project/Collaborator", user);
    }
}
