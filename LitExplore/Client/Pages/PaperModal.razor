@inject HttpClient Http

<BSModal @ref="PaperDetails" Size="Size.Large">
    @if (paper != null) {
        <BSModalHeader OnClick="@(() => PaperDetails.Hide())"><h3>@paper.Name</h3></BSModalHeader>
        <BSModalBody>
            <h4>Abstract Preview</h4>
            <p>@paper.Abstract</p>
            <h4>Authors</h4>
            <ul>
                @foreach (var Author in paper.Authors) {
                    <li style="list-style-type: disc;">@Author.Surname, @Author.GivenName</li>
                }
            </ul>
            
            <a href="@paper.URL" target="_blank">Go to paper</a>
            
        </BSModalBody>
    } else {
        <BSModalBody>Loading paper...</BSModalBody>
    }
    <BSModalFooter style="display:flex; justify-content:center;">
        <BSButton Color="Color.Danger" @onclick="@(()=>{removePaperFromProject();})" >Remove Paper</BSButton>
    </BSModalFooter>
</BSModal>


@code {
    [Parameter]
    public int ProjectId {get; set;}
    private BSModal PaperDetails {get; set; }
    protected PaperDetailsDTO paper {get; set;}
	public async void OpenModal(int id) {
        paper = await Http.GetFromJsonAsync<PaperDetailsDTO>($"api/Paper/Details/{id}");
        PaperDetails.Show();
	}
    protected async void removePaperFromProject(){
        ProjectAddRemovePaperDTO paperToRemove = new ProjectAddRemovePaperDTO(ProjectId, paper.Id);
        var removePaper = await Http.PutAsJsonAsync<ProjectAddRemovePaperDTO>($"api/Project/Paper/", paperToRemove);
    }
}